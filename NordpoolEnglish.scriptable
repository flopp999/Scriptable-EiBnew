{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "green",
    "glyph" : "magic"
  },
  "name" : "NordpoolEnglish",
  "script" : "\/\/ License: Personal use only. See LICENSE for details.\n\/\/ This script was created by Flopp999\n\/\/ Support me with a coffee https:\/\/www.buymeacoffee.com\/flopp999 \nlet version = 0.791\nlet allValues = [];\nlet widget;\nlet daybefore;\nlet day;\nlet date;\nlet prices;\nlet pricesJSON;\nlet priceAvg;\nlet priceLowest;\nlet priceHighest;\nlet priceDiff;\nlet area;\nlet resolution;\nlet currency;\nlet vat;\nlet includevat;\nlet extras;\nlet language;\nlet settings = {}\nlet langId;\nlet hour;\nlet minute;\nlet translationData;\nlet currentLang;\nconst fileNameSettings = Script.name() + \"_Settings.json\";\nconst fileNameTranslations = Script.name() + \"_Translations.json\";\nconst fm = FileManager.iCloud();\nconst dir = fm.documentsDirectory();\nconst filePathSettings = fm.joinPath(dir, fileNameSettings);\nconst filePathTranslations = fm.joinPath(dir, fileNameTranslations);\nlet height = 1150;\nlet width = 1300;\nlet keys = [];\n\nif (!config.runsInWidget){\n  await updatecode();\n  await readTranslations();\n  await readsettings();\n  await createVariables();\n  await start();\n  await createVariables();\n}\n\nif (config.runsInWidget){\n await readsettings();\n  if (keys.length < 11 || keys == undefined) {\n    let widget = new ListWidget();\n    widget.addText(\"You need to run \\\"\" + Script.name() + \"\\\" in the app\");\n    Script.setWidget(widget);\n    Script.complete();\n    return;\n  }\n}\nif (config.runsInWidget){\n  await updatecode();\n  await createVariables();\n}\n\nasync function start() {\n  const [topType, topDay] = settings.showattop.split(\",\").map(s => s.trim());\n  const [middleType, middleDay] = settings.showatmiddle.split(\",\").map(s => s.trim());\n  const [bottomType, bottomDay] = settings.showatbottom.split(\",\").map(s => s.trim());\n  let alert = new Alert();\n  let vatText = includevat == 1 ? t(\"yes\") : t(\"no\")\n  alert.message = \n    t(\"changesetup\") + \"?\\n\" +\n    t(\"top\").charAt(0).toUpperCase() + t(\"top\").slice(1) + \":\\n\" + t(topType) + (topDay ? \", \" + t(topDay) : \"\") + \"\\n\" +\n    t(\"middle\").charAt(0).toUpperCase() + t(\"middle\").slice(1) + \":\\n\" + t(middleType) + (middleDay ? \", \" + t(middleDay) : \"\") + \"\\n\" +\n    t(\"bottom\").charAt(0).toUpperCase() + t(\"bottom\").slice(1) + \":\\n\" + t(bottomType) + (bottomDay ? \", \" + t(bottomDay) : \"\") + \"\\n\" +\n    t(\"area\") + \": \" + area + \"\\n\" +\n    \"Extras: \" + extras + \"\\n\" +\n    t(\"withvat\") + \": \" + vatText + \"\\n\";\n  if (includevat == 1) {\n    alert.message += t(\"vat\") + \": \" + vat;\n  }\n  alert.addAction(t(\"yes\"));\n  alert.addAction(t(\"no\"));\n  let index = await alert.presentAlert();\n  if (index === 0) {\n    settings = await ask();\n    fm.writeString(filePathSettings, JSON.stringify(settings, null, 2)); \/\/ Pretty print\n  }\n}\n\nasync function updatecode() {\n  try {\n    const req = new Request(\"https:\/\/raw.githubusercontent.com\/flopp999\/Scriptable-NordPool\/main\/Version.txt\");\n    req.timeoutInterval = 1;\n    const serverVersion = await req.loadString()\n    if (version < serverVersion) {\n      try {\n        const req = new Request(\"https:\/\/raw.githubusercontent.com\/flopp999\/Scriptable-NordPool\/main\/Nordpool.js\");\n        req.timeoutInterval = 1;\n        const response = await req.load();\n        const status = req.response.statusCode;\n        if (status !== 200) {\n          throw new Error(`Error: HTTP ${status}`);\n        }\n        const codeString = response.toRawString();\n        fm.writeString(module.filename, codeString);\n\n        const reqTranslations = new Request(\"https:\/\/raw.githubusercontent.com\/flopp999\/Scriptable-NordPool\/main\/Translations.json\");\n        reqTranslations.timeoutInterval = 1;\n        const responseTranslations = await reqTranslations.load();\n        const statusTranslations = reqTranslations.response.statusCode;\n        if (statusTranslations !== 200) {\n          throw new Error(`Error: HTTP ${statusTranslations}`);\n        }\n        const codeStringTranslations = responseTranslations.toRawString();\n        fm.writeString(filePathTranslations, codeStringTranslations);\n        fm.remove(filePathSettings);\n        let updateNotify = new Notification();\n        updateNotify.title = Script.name();\n        updateNotify.body = \"New version installed, \" + serverVersion;\n        updateNotify.sound = \"default\";\n        await updateNotify.schedule();\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  } catch (error) {\n    console.error(\"The update failed. Please try again later.\" + error);\n  }\n}\n\nasync function readsettings() {\n  try {\n    if (fm.fileExists(filePathSettings)) {\n      let raw = fm.readString(filePathSettings);\n      settings = JSON.parse(raw);\n      langId = settings.language; \/\/ 1 = ENG, 2 = DE, 3 = SV\n      await readTranslations();\n      keys = Object.keys(settings);\n      if (keys.length < 11) {\n        throw new Error(\"Settings file is incomplete or corrupted\");\n        return;\n      }\n    } else {\n      if (config.runsInWidget) {\n        return;\n      }\n      await askForLanguage();\n      await readTranslations();\n      let alert = new Alert();\n      alert.title = \"Support\";\n      alert.message = t(\"buymeacoffee\") + \"?\";\n      alert.addAction(t(\"noway\"));\n      alert.addCancelAction(t(\"ofcourse\"));\n      let response = await alert.present();\n      if (response === -1) {\n        Safari.open(\"https:\/\/buymeacoffee.com\/flopp999\");\n      }\n      throw new Error(\"Settings file not found\");\n    }\n  } catch (error) {\n    if (config.runsInWidget) {\n      return;\n    }\n    console.warn(\"Settings file not found or error reading file: \" + error.message);\n    settings = await ask();\n    fm.writeString(filePathSettings, JSON.stringify(settings, null, 2)); \/\/ Pretty print\n  }\n}\n\nasync function createVariables() {\n  area = settings.area;\n  resolution = settings.resolution;\n  currency = settings.currency;\n  vat = settings.vat;\n  includevat = settings.includevat;\n  extras = settings.extras;\n  language = settings.language;\n}\n\nasync function readTranslations() {\n  if (!fm.fileExists(filePathTranslations)) {\n    let url = \"https:\/\/raw.githubusercontent.com\/flopp999\/Scriptable-NordPool\/main\/Translations.json\";\n    let req = new Request(url);\n    req.timeoutInterval = 1;\n    let content = await req.loadString();\n    fm.writeString(filePathTranslations, content);\n  }\n  try {\n    translationData = JSON.parse(fm.readString(filePathTranslations));\n    const langMap = {\n      1: \"en\",\n      2: \"de\",\n      3: \"sv\"\n    };\n    currentLang = langMap[langId] || \"en\"; \/\/ fallback to english\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nfunction t(key) {\n  const entry = translationData[key];\n  if (!entry) return `[${key}]`; \/\/ key is missing\n  return entry[currentLang] || entry[\"en\"] || `[${key}]`;\n}\n\nasync function ask() {\n  [settings.area, settings.vat, settings.currency] = await askForArea();\n  settings.includevat = await askForIncludeVAT();\n  settings.extras = await askForExtras();\n  await askForAllShowPositions(\"top\");\n  settings.resolution = 60;\n  return settings\n}\n\nasync function askForAllShowPositions() {\n  const options = [\"graph\", \"table\", \"pricestats\", \"nothing\"];\n  const days = [\"today\", \"tomorrow\"];\n  const graphTypes = [\"line\", \"bar\"];\n  const chosenCombinations = [];\n  const positions = [\"top\", \"middle\", \"bottom\"];\n  const graphOption = {};\n  for (let position of positions) {\n    const usedCount = (type) =>\n      chosenCombinations.filter(c => c && c.type === type).length;\n\n    const usedGraph = usedCount(\"graph\");\n    const usedTable = usedCount(\"table\");\n\n    let filteredOptions = options.filter(type => {\n      if (type === \"graph\" && usedGraph >= 2) return false;\n      if (type === \"table\" && usedTable >= 2) return false;\n      if ((usedGraph + usedTable) >= 3 && (type === \"graph\" || type === \"table\")) return false;\n      return true;\n    });\n\n    const alert = new Alert();\n    alert.message = `${t(\"showwhat\")} ${t(position)}?`;\n    filteredOptions.forEach(o => alert.addAction(t(o)));\n    const index = await alert.presentAlert();\n    const choice = filteredOptions[index];\n\n    let day = \"\";\n    if (choice === \"graph\") {\n      const graphTypeAlert = new Alert();\n      graphTypeAlert.title = t(position).charAt(0).toUpperCase() + t(position).slice(1);\n      graphTypeAlert.message = t(\"choosegraphtype\");\n      graphTypes.forEach(g => graphTypeAlert.addAction(t(g)));\n      const gIndex = await graphTypeAlert.presentAlert();\n      const selectedGraphType = graphTypes[gIndex];\n      graphOption[position] = selectedGraphType;\n    }\n    if (choice !== \"nothing\") {\n      const usedDaysForType = chosenCombinations\n        .filter(c => c.type === choice)\n        .map(c => c.day);\n      const availableDays = days.filter(d => !usedDaysForType.includes(d));\n      const dayAlert = new Alert();\n      dayAlert.title = t(position).charAt(0).toUpperCase() + t(position).slice(1);\n      dayAlert.message = t(\"showday\") + \"?\";\n      availableDays.forEach(d => dayAlert.addAction(t(d)));\n      const dayIndex = await dayAlert.presentAlert();\n      day = availableDays[dayIndex];\n    }\n\n    chosenCombinations.push({ position, type: choice, day });\n    settings[`showat${position}`] = `${choice}, ${day}`;\n  }\n  settings.graphOption = graphOption;\n  \n  fm.writeString(filePathSettings, JSON.stringify(settings, null, 2));\n  const totalGraph = chosenCombinations.filter(c => c.type === \"graph\").length;\n  const totalTable = chosenCombinations.filter(c => c.type === \"table\").length;\n  const totalPriceStats = chosenCombinations.filter(c => c.type === \"pricestats\").length;\n  const heightMap = {\n    \"1-0-0\": 1200,\n    \"0-1-0\": 800,\n    \"0-0-1\": 800,\n  \n    \"1-1-0\": 750,\n    \"1-0-1\": 1130,\n    \"0-1-1\": 900,\n    \"2-0-0\": 550,\n    \"0-2-0\": 600,\n  \n    \"1-1-1\": 730,\n    \"2-1-0\": 380,\n    \"1-2-0\": 540,\n    \"2-0-1\": 470,\n    \"0-2-1\": 580,\n    \"1-0-2\": 1050,\n    \"0-1-2\": 900,\n  };\n  \n  const key = `${totalGraph}-${totalTable}-${totalPriceStats}`;\n  settings.height = heightMap[key] ?? 1150;\n  return settings;\n  }\n\n\n\/\/ Select resolution\nasync function askForLanguage() {\n  let alert = new Alert();\n  alert.message = \"Language\/Sprache\/Språk:\";\n  alert.addAction(\"English\");\n  alert.addAction(\"Deutsch\");\n  alert.addAction(\"Svenska\");\n  let index = await alert.presentAlert();\n  settings.language = [1,2,3][index];\n  fm.writeString(filePathSettings, JSON.stringify(settings, null, 2)); \/\/ Pretty print\n  langId = settings.language; \/\/ 1 = ENG, 2 = DE, 3 = SV\n  return [1,2,3][index];\n}\n\n\/\/ Select area\nasync function askForArea() {\n  let alert = new Alert();\n  alert.message = t(\"chooseyourelectricityarea\") + \":\";\n  let areas = [\n    \"AT\",\"BE\",\"BG\",\"DK1\",\"DK2\",\"EE\",\"FI\",\"FR\",\"GER\",\n    \"LT\",\"LV\",\"NL\",\"NO1\",\"NO2\",\"NO3\",\"NO4\",\"NO5\",\n    \"PL\",\"SE1\",\"SE2\",\"SE3\",\"SE4\",\"TEL\",\"SYS\"\n  ];\n  for (let area of areas) {\n    alert.addAction(area);\n  }\n  let index = await alert.presentAlert();\n  let area = [\n    \"AT\",\"BE\",\"BG\",\"DK1\",\"DK2\",\"EE\",\"FI\",\"FR\",\"GER\",\n    \"LT\",\"LV\",\"NL\",\"NO1\",\"NO2\",\"NO3\",\"NO4\",\"NO5\",\n    \"PL\",\"SE1\",\"SE2\",\"SE3\",\"SE4\",\"TEL\",\"SYS\"][index];\n  let vat = [\n    20,  \/\/ AT - Austria\n    6,   \/\/ BE - Belgium\n    20,  \/\/ BG - Bulgaria\n    25,  \/\/ DK1 - Denmark (East)\n    25,  \/\/ DK2 - Denmark (West)\n    20,  \/\/ EE - Estonia\n    24,  \/\/ FI - Finland\n    20,  \/\/ FR - France\n    19,  \/\/ GER - Germany\n    21,  \/\/ LT - Lithuania\n    21,  \/\/ LV - Latvia\n    21,  \/\/ NL - Netherlands\n    25,  \/\/ NO1 - Norway\n    25,  \/\/ NO2 - Norway\n    25,  \/\/ NO3 - Norway\n    25,  \/\/ NO4 - Norway\n    25,  \/\/ NO5 - Norway\n    23,  \/\/ PL - Poland\n    25,  \/\/ SE1 - Sweden\n    25,  \/\/ SE2 - Sweden\n    25,  \/\/ SE3 - Sweden\n    25,  \/\/ SE4 - Sweden\n    19,   \/\/ TEL - Romania\n    0    \/\/ SYS - System price or not applicable\n    ][index];\n  let currencies2 = [\n    \"EUR\",  \/\/ AT - Austria\n    \"EUR\",\n    \"BGN\",\n    \"DKK\",\n    \"DKK\",\n    \"EUR\",\n    \"EUR\",\n    \"EUR\",\n    \"EUR\",\n    \"EUR\",\n    \"EUR\",\n    \"EUR\",\n    \"NOK\",\n    \"NOK\",\n    \"NOK\",\n    \"NOK\",\n    \"NOK\",\n    \"PLN\",\n    \"SEK\", \/\/ SE1 - Sweden\n    \"SEK\", \/\/ SE2 - Sweden\n    \"SEK\", \/\/ SE3 - Sweden\n    \"SEK\", \/\/ SE4 - Sweden\n    \"RON\",\n    \"EUR\"\n    ][index];\n  return [area, vat, currencies2];\n}\n\n\/\/ Select resolution\nasync function askForResolution() {\n  let alert = new Alert();\n  alert.message = t(\"choosedataresolution\") + \":\";\n  alert.addAction(\"15 min\");\n  alert.addAction(\"60 min\");\n  let index = await alert.presentAlert();\n  return [15, 60][index];\n}\n\n\/\/ Include VAT?\nasync function askForIncludeVAT() {\n  let alert = new Alert();\n  alert.message = t(\"doyouwantvat\") + \"?\";\n  alert.addAction(t(\"withvat\"));\n  alert.addAction(t(\"withoutvat\"));\n  let index = await alert.presentAlert();\n  return [1,0][index];\n}\n\n\/\/ Include extra cost?\nasync function askForExtras() {\n  let alert = new Alert();\n  alert.title = t(\"extraelectricitycost\");\n  alert.message = (t(\"enterextra\") + `${settings.currency}`);\n  alert.addTextField(\"e.g. 0.30\",String(settings.extras ?? \"0\")).setDecimalPadKeyboard();\n  alert.addAction(\"OK\");\n  await alert.present();\n  let input = alert.textFieldValue(0);\n  input = input.replace(\",\", \".\")\n  let newCost = parseFloat(input);\n  return newCost;\n}\n\nasync function Table(day) {\n  await Data(day);\n  if (daybefore != day){\n  let left = listwidget.addStack();\n  let whatday = left.addText(date);\n  whatday.textColor = new Color(\"#ffffff\");\n  whatday.font = Font.lightSystemFont(13);\n  left.addSpacer();\n  if (prices == 0) {\n    whatday = left.addText(t(\"after13\"));\n    whatday.textColor = new Color(\"#ffffff\");\n    whatday.font = Font.lightSystemFont(13);\n    listwidget.addSpacer(5);\n    return;\n  }else{\n  \n  let updatetext = left.addText(t(\"updated\") + updated);\n  updatetext.font = Font.lightSystemFont(13);\n  updatetext.textColor = new Color(\"#ffffff\");\n  }\n  }\n  daybefore = day;\n  let head = listwidget.addStack()\n  let stackNames = [\"first\", \"second\", \"third\", \"fourth\", \"fifth\"];\n  let timeStacks = {};\n  let priceStacks = {};\n\n  for (let name of stackNames) {\n    let timeStack = head.addStack();\n    timeStack.layoutVertically();\n    head.addSpacer(4);\n    let priceStack = head.addStack();\n    priceStack.layoutVertically();\n    if (name !== stackNames[stackNames.length - 1]) {\n      head.addSpacer();\n    }\n    timeStacks[name] = timeStack;\n    priceStacks[name] = priceStack;\n  }\n\n  \/\/ Loop to add time and prices\n  for (let s = 0; s < stackNames.length; s++) {\n    let name = stackNames[s];\n    let timeStack = timeStacks[name];\n    let priceStack = priceStacks[name];\n    let hourOffset = 0 + s * 5; \/\/ how many hours per column\n    \/\/ Add time\n    for (let i = hourOffset; i < hourOffset + 5; i++) {\n      if (i == 24) {\n        continue\n      }\n      for (let a = 0; a < 4; a++) {\n        let timeText = timeStack.addText(`${i}:${a === 0 ? \"00\" : a * 15}`);\n        timeText.leftAlignText();\n        if (allValues.length == 24) {\n          if (i === hour && day == \"today\") {\n            timeText.textColor = new Color(\"#00ffff\");\n            timeText.font = Font.lightSystemFont(bigFont);\n          } else {\n            timeText.textColor = new Color(\"#ffffff\");\n            timeText.font = Font.lightSystemFont(mediumFont);\n          }\n          break\n        }\n        if (i === hour && minute >= a * 15 && minute < (a + 1) * 15) { \/\/ actual hour and identifies which 15-minute interval\n          timeText.textColor = new Color(\"#00ffff\");\n          timeText.font = Font.lightSystemFont(bigFont);\n        } else {\n          timeText.textColor = new Color(\"#ffffff\");\n          timeText.font = Font.lightSystemFont(mediumFont);\n        }\n      }\n    }\n\n    \/\/ Add prices\n    let priceStart = 0 + s * Math.ceil(allValues.length*0.2083); \/\/ 0.2083 is the factor between 24 and 96\n    for (let i = priceStart; i < priceStart + Math.ceil(allValues.length*0.2083); i++) {\n      if (i == allValues.length){\n        break\n      }\n      let priceVal = Math.round(pricesJSON[i]);\n      let priceText = priceStack.addText(String(priceVal));\n      priceText.leftAlignText();\n      if (i === (hour * 4) + Math.floor(minute \/ 15)) {\n         priceText.font = Font.lightSystemFont(bigFont);\n      } else {\n        priceText.font = Font.lightSystemFont(mediumFont);\n      }\n      if (allValues.length == 24) {\n        if (i === hour && day == \"today\") {\n          priceText.font = Font.lightSystemFont(bigFont);\n        }\n      }\n      if (pricesJSON[i] == priceLowest){\n        priceText.textColor = new Color(\"#00cf00\"); \/\/ green\n      } else if (pricesJSON[i] < priceDiff + priceLowest) {\n        priceText.textColor = new Color(\"#ffff00\"); \/\/ yellow\n      } else if (pricesJSON[i] == priceHighest){\n        priceText.textColor = new Color(\"#fa60ff\"); \/\/ purple\n      } else if (pricesJSON[i] > priceHighest - priceDiff) {\n        priceText.textColor =  new Color(\"#ff3000\"); \/\/ red\n      } else {\n        priceText.textColor = new Color(\"#f38\"); \/\/ orange\n      }\n    }\n  }\n  listwidget.addSpacer(5);\n}\n\nasync function Graph(day, graphOption) {\n\/\/chart\n  await Data(day);\n  if (daybefore != day){ \n    let left = listwidget.addStack();\n    let whatday = left.addText(date);\n    whatday.textColor = new Color(\"#ffffff\");\n    whatday.font = Font.lightSystemFont(13);\n    left.addSpacer();\n    if (prices == 0) {\n      whatday = left.addText(\"Available after 13:00\");\n      whatday.textColor = new Color(\"#ffffff\");\n      whatday.font = Font.lightSystemFont(13);\n      listwidget.addSpacer(5);\n      daybefore = day;\n      return;\n    } else {\n      let updatetext = left.addText(t(\"updated\") + updated);\n      updatetext.font = Font.lightSystemFont(13);\n      updatetext.textColor = new Color(\"#ffffff\");\n    }\n  }\n  daybefore = day;\n  if (resolution == 60) {\n    let avgtoday = []\n    let dotNow = \"\"\n    let countertoday = 0\n    let counterdot = 0\n    \n    do{\n      avgtoday += priceAvg + \",\"\n      countertoday += 1\n    }\n    while (countertoday < 24)\n    \n    do{\n      if (hour == counterdot && day == \"today\") {\n        dotNow += pricesJSON[counterdot] + \",\"\n      }\n      else {\n        dotNow += \",\"\n      }\n      counterdot += 1\n    }\n    while (counterdot < 24)\n    \n    let graphtoday = \"https:\/\/quickchart.io\/chart?bkg=black&w=1300&h=\"+settings.height+\"&c=\"\n    graphtoday += encodeURI(\"{\\\n      data: { \\\n        labels: [\"+hours+\"],\\\n        datasets: [\\\n        {\\\n            data: [\"+dotNow+\"],\\\n            type: 'line',\\\n            fill: false,\\\n            borderColor: 'rgb(0,255,255)',\\\n            borderWidth: 65,\\\n            pointRadius: 6\\\n          },\\\n          {\\\n            data: [\"+avgtoday+\"],\\\n            type: 'line',\\\n            fill: false,\\\n            borderColor: 'orange',\\\n            borderWidth: 6,\\\n            pointRadius: 0\\\n          },\\\n          {\\\n            data: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\\\n            type: 'line',\\\n            fill: false,\\\n            borderColor: 'rgb(255,255,255)',\\\n            borderWidth: 6,\\\n            pointRadius: 0\\\n          },\\\n          {\\\n            data: [\"+pricesJSON+\"],\\\n            type: '\"+graphOption+\"',\\\n            fill: false,\\\n            borderColor: getGradientFillHelper('vertical',['rgb(255,25,255)','rgb(255,48,8)','orange','rgb(255,255,0)','rgb(0,150,0)']),\\\n            borderWidth: 20, \\\n            pointRadius: 0\\\n          },\\\n        ]\\\n      },\\\n        options:\\\n          {\\\n            legend:\\\n            {\\\n              display: false\\\n            },\\\n            scales:\\\n            {\\\n              xAxes: [{\\\n                offset:true,\\\n                ticks:{fontSize:35,fontColor:'white'}\\\n              }],\\\n              yAxes: [{\\\n                ticks:{stepSize:10,beginAtZero:true,fontSize:35,fontColor:'white'}\\\n              }]\\\n            }\\\n          }\\\n    }\")\n    graphtoday.timeoutInterval = 1;\n    const GRAPH = await new Request(graphtoday).loadImage()\n    let emptyrow = listwidget.addStack()\n    listwidget.addSpacer(5)\n    let chart = listwidget.addStack()\n    chart.addImage(GRAPH) \n  }\n  listwidget.addSpacer(5);\n}\n\nasync function PriceStats(day) {\n  await Data(day);\n  if (daybefore != day){\n    let left = listwidget.addStack();\n    let whatday = left.\n      addText(date);\n    whatday.textColor = new Color(\"#ffffff\");\n    whatday.font = Font.lightSystemFont(13);\n    left.addSpacer();\n    let updatetext = left.addText(t(\"updated\") + updated);\n    updatetext.font = Font.lightSystemFont(13);\n    updatetext.textColor = new Color(\"#ffffff\");\n  }\n  daybefore = day;\n  if (prices == 0) {\n    return;\n    }\n  let bottom = listwidget.addStack();\n  if (day != \"tomorrow\"){\n  \n  \/\/ now\n  let now = bottom.addText(t(\"now\") + \" \" + Math.round(pricesJSON[hour]));\n  now.font = Font.lightSystemFont(11);\n  now.textColor = new Color(\"#00ffff\");\n  bottom.addSpacer();\n    }\n  \/\/ lowest\n  let lowest = bottom.addText(t(\"lowest\") + \" \" + Math.round(priceLowest));\n  lowest.font = Font.lightSystemFont(11);\n  lowest.textColor = new Color(\"#00cf00\");\n  bottom.addSpacer();\n  \/\/ average\n  let avg = bottom.addText(t(\"average\") + \" \" + Math.round(priceAvg));\n  avg.font = Font.lightSystemFont(11);\n  avg.textColor = new Color(\"#f38\");\n  bottom.addSpacer();\n  \/\/ highest\n  let highest = bottom.addText(t(\"highest\") + \" \" + Math.round(priceHighest));\n  highest.font = Font.lightSystemFont(11);\n  highest.textColor = new Color(\"#fa60ff\");\n  listwidget.addSpacer(5);\n}\n\nconst smallFont = 10;\nconst mediumFont = 12;\nconst bigFont = 13.5;\nconst hours = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23];\n\n\/\/ Today date\nasync function Data(day) {\n  allValues = [];\n  Path = fm.joinPath(dir, \"NordPool_\" + day + \"Prices.json\");\n  DateObj = new Date();\n  async function getData() {\n    if (day == \"tomorrow\") {\n      DateObj.setDate(DateObj.getDate() + 1);\n    }\n    const yyyy = DateObj.getFullYear();\n    const mm = String(DateObj.getMonth() + 1).padStart(2, '0');\n    const dd = String(DateObj.getDate()).padStart(2, '0');\n    const date = `${yyyy}-${mm}-${dd}`;\n    const Url = `https:\/\/dataportal-api.nordpoolgroup.com\/api\/DayAheadPriceIndices?date=${date}&market=DayAhead&indexNames=${area}&currency=${currency}&resolutionInMinutes=${resolution}`;\n    const request = new Request(Url);\n    request.timeoutInterval = 1;\n    let response = (await request.loadJSON());\n    const dataJSON = JSON.stringify(response, null ,2);\n    fm.writeString(Path, dataJSON);\n  }\n  if (fm.fileExists(Path)) {\n    let modified = fm.modificationDate(Path);\n    let now = new Date();\n    let hoursDiff = (now - modified) \/ (1000 * 60 * 60);\n    let modifiedDay = modified.getDate();\n    let modifiedMonth = modified.getMonth();\n    let modifiedYear = modified.getFullYear();\n    let yesterday = new Date(now);\n    yesterday.setDate(now.getDate() - 1);\n    let isFromYesterday =\n    modifiedDay === yesterday.getDate() &&\n    modifiedMonth === yesterday.getMonth() &&\n    modifiedYear === yesterday.getFullYear();\n    if (hoursDiff > 6 || isFromYesterday) {\n      await getData();\n    }\n  } else {\n    await getData();\n  }\n  hour = DateObj.getHours();\n  minute = DateObj.getMinutes();\n  let content = fm.readString(Path);\n  response = JSON.parse(content);\n  date = response.deliveryDateCET;  \n  prices = response.multiIndexEntries;\n  let Updated = response.updatedAt;\n  updated = Updated.replace(\/\\.\\d+Z$\/, '').replace('T', ' ');\n  for (let i = 0; i < prices.length; i++) {\n    const value = prices[i][\"entryPerArea\"][`${area}`];\n    allValues.push(String(value\/10* (1 + \".\" + (includevat*vat)) + extras));\n  }\n  pricesJSON = JSON.parse(JSON.stringify(allValues));\n  priceLowest = (Math.min(...pricesJSON.map(Number)));\n  priceHighest = (Math.max(...pricesJSON.map(Number)));\n  priceDiff = (priceHighest - priceLowest)\/3;\n  priceAvg = pricesJSON.map(Number).reduce((a, b) => a + b, 0) \/ pricesJSON.length;\n}\n\n\/\/ Tomorrow date\nasync function DateTomorrow() { \n  allValues = [];\n  tomorrowPath = fm.joinPath(dir, \"NordPool_TomorrowPrices.json\");\n  async function getTomorrowData() {\n    const tomorrowDateObj = new Date();\n    tomorrowDateObj.setDate(tomorrowDateObj.getDate() + 1);\n    const yyyyTomorrow = tomorrowDateObj.getFullYear();\n    const mmTomorrow = String(tomorrowDateObj.getMonth() + 1).padStart(2, '0');\n    const ddTomorrow = String(tomorrowDateObj.getDate()).padStart(2, '0');\n    const tomorrowStr = `${yyyyTomorrow}-${mmTomorrow}-${ddTomorrow}`;\n    const tomorrowUrl = `https:\/\/dataportal-api.nordpoolgroup.com\/api\/DayAheadPriceIndices?date=${tomorrowStr}&market=DayAhead&indexNames=${area}&currency=${currency}&resolutionInMinutes=${resolution}`;\n    const requestTomorrow = new Request(tomorrowUrl);\n    requestTomorrow.timeoutInterval = 1;\n    let responseTomorrow = (await requestTomorrow.loadJSON());\n    const tomorrowJSON = JSON.stringify(responseTomorrow, null ,2);\n    fm.writeString(tomorrowPath, tomorrowJSON);\n  }\n  if (fm.fileExists(tomorrowPath)) {\n    let modified = fm.modificationDate(tomorrowPath);\n    let now = new Date();\n    let hoursDiff = (now - modified) \/ (1000 * 60 * 60);\n    let modifiedDay = modified.getDate();\n    let modifiedMonth = modified.getMonth();\n    let modifiedYear = modified.getFullYear();\n    let yesterday = new Date(now);\n    yesterday.setDate(now.getDate() - 1);\n    let isFromYesterday =\n    modifiedDay === yesterday.getDate() &&\n    modifiedMonth === yesterday.getMonth() &&\n    modifiedYear === yesterday.getFullYear();\n  \n    if (hoursDiff > 6 || isFromYesterday) {\n      await getTomorrowData();\n    }\n  } else {\n    await getTomorrowData();\n  }\n  let content = fm.readString(tomorrowPath);\n  responseTomorrow = JSON.parse(content);\n  date = responseTomorrow.deliveryDateCET;  \n  prices = responseTomorrow.multiIndexEntries;\n  let tomorrowUpdated = responseTomorrow.updatedAt;\n  updated = tomorrowUpdated.replace(\/\\.\\d+Z$\/, '').replace('T', ' ');\n  for (let i = 0; i < prices.length; i++) {\n    const value = prices[i][\"entryPerArea\"][`${area}`];\n    allValues.push(String(value\/10* (1 + \".\" + (includevat*vat)) + extras));\n  }\n  pricesJSON = JSON.parse(JSON.stringify(allValues));\n  priceLowest = (Math.min(...pricesJSON.map(Number)));\n  priceHighest = (Math.max(...pricesJSON.map(Number)));\n  priceDiff = (priceHighest - priceLowest)\/3;\n  priceAvg = pricesJSON.map(Number).reduce((a, b) => a + b, 0) \/ pricesJSON.length;\n}\n\nasync function renderSection(position) {\n  const value = settings[`showat${position}`];\n\n  if (!value || value === \"nothing\") return;\n\n  const [type, day] = value.split(\",\").map(s => s.trim());\n  const graphOption = settings.graphOption[position]\n  switch (type) {\n    case \"table\":\n      await Table(day);\n      break;\n    case \"graph\":\n      await Graph(day, graphOption);\n      break;\n    case \"pricestats\":\n      await PriceStats(day);\n      break;\n    default:\n  }\n}\n\nlet listwidget = new ListWidget();\n\nasync function createWidget(){\n  listwidget.backgroundColor = new Color(\"#000000\");\n  await renderSection(\"top\");\n  await renderSection(\"middle\");\n  await renderSection(\"bottom\");  \n  let moms = listwidget.addStack();\n  momstext = moms.addText(\"v. \" + version);\n  momstext.font = Font.lightSystemFont(10);\n  momstext.textColor = new Color(\"#ffffff\");\n  moms.addSpacer(120);\n  momstext = moms.addText(area);\n  momstext.font = Font.lightSystemFont(10);\n  momstext.textColor = new Color(\"#ffffff\");\n  moms.addSpacer();\n  momstext = moms.addText(\"Extras: \" + extras);\n  momstext.font = Font.lightSystemFont(10);\n  momstext.textColor = new Color(\"#ffffff\");\n  moms.addSpacer();\n  if (includevat == 1) {\n    momstext = moms.addText(t(\"inclvat\"));\n  }\n  else {\n    momstext = moms.addText(t(\"exclvat\"));\n  }\n  momstext.font = Font.lightSystemFont(10);\n  momstext.textColor = new Color(\"#ffffff\");\n  return listwidget\n}\n\nwidget = await createWidget();\n\nif (config.runsInWidget) {\n  Script.setWidget(widget);\n} else {\n  if (Math.random() < 0.5) {\n    let alert = new Alert();\n    alert.title = \"Support\";\n    alert.message = t(\"buymeacoffee\") + \"?\";\n    alert.addCancelAction(t(\"ofcourse\"));\n    alert.addAction(t(\"noway\"));\n    let response = await alert.present();\n    if (response === -1) {\n      Safari.open(\"https:\/\/buymeacoffee.com\/flopp999\");\n    }\n  }\n}\n\nwidget.presentLarge()\nScript.complete();\n",
  "share_sheet_inputs" : [

  ]
}